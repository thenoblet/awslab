# ------------------------------------------------------------------------------
# GitHub Actions Workflow: Build and Push to Amazon ECR
#
# Author: Patrick Noblet Appiah (@thenoblet)
# Date:   09-09-2025
#
# Purpose:
#   - On each push to the main branch, this workflow:
#       1. Builds and tags a Docker image of the application.
#       2. Pushes the image to Amazon Elastic Container Registry (ECR).
#       3. Generates ECS task and deployment artifacts (taskdef.json, appspec.yml).
#       4. Packages and uploads these artifacts to S3 for CodePipeline to consume.
#
# Notes:
#   - Authentication to AWS is handled via OIDC (no long-lived AWS keys).
#   - CodePipeline + EventBridge integration will automatically pick up the S3
#     deployment package and proceed with ECS deployment.
#   - IMAGE_TAG is pinned to the Git commit SHA for immutability, while 'latest'
#     is used for ECS service updates.
#
# Security:
#   - Requires a pre-configured IAM role (`GitHubOidcRoleForEcr-thenoblet-awslab`)
#     which is created in the template (security.yaml) with ECR, ECS, and S3 permissions.
#   - OIDC avoids the need to store static AWS credentials in GitHub Secrets.
#
# ------------------------------------------------------------------------------

name: Build and Push to Amazon ECR

on:
  push:
    branches: ["main"] # Trigger only on pushes to main branch

permissions:
  id-token: write # Required for AWS OIDC federation
  contents: read # Read repository contents

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "eu-central-1" # Deployment region
      ECR_REPOSITORY: "cicd-ecr-repo" # ECR repository for app images
      S3_BUCKET: "artif-bkt" # S3 bucket storing deployment artifacts
      ECS_TASK_DEFINITION: "CICD-ECS-STK-task" # ECS task definition family name
      CONTAINER_NAME: "awslab-app-container" # Container name inside ECS service
      ECS_CLUSTER_STACK_NAME: "CICD-ECS-STK"

    steps:
      # ------------------------------
      # Step 1: Checkout source code
      # ------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ----------------------------------------------------
      # Step 2: Authenticate to AWS using OIDC federation
      # - Eliminates static AWS credentials in GitHub Secrets
      # - Assumes a role with the required permissions
      # ----------------------------------------------------
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOidcRoleForEcr-thenoblet-awslab
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ECSPushFromGitHubActions

      # ------------------------------
      # Step 3: Log in to Amazon ECR
      # ------------------------------
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ---------------------------------------------------------
      # Step 4: Build, tag, and push image to ECR
      # - Image tagged with commit SHA (immutable history).
      # - Also tagged as 'latest' for ECS deployment updates.
      # ---------------------------------------------------------
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build image with commit SHA
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

          # Tag and push as 'latest' (ECS always pulls latest)
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Export the latest image URI for downstream steps
          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      # -----------------------------------------------------------------
      # Step 5: Retrieve ECS Task Execution Role ARN from CloudFormation
      # - Required for the task definition JSON (executionRoleArn).
      # - Dynamically fetched to avoid hardcoding role ARNs in workflow.
      # -----------------------------------------------------------------
      - name: Get ECS Task Execution Role ARN
        id: get-execution-role
        run: |
          EXECUTION_ROLE_ARN=$(aws cloudformation describe-stack-resources \
            --stack-name ${{ env.ECS_CLUSTER_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StackResources[?LogicalResourceId==`ECSTaskExecutionRole`].PhysicalResourceId' \
            --output text)
          echo "execution-role-arn=$EXECUTION_ROLE_ARN" >> $GITHUB_OUTPUT

      # ------------------------------------------------------------------
      # Step 6: Generate deployment files for CodePipeline/CodeDeploy
      # - appspec.yml: Defines ECS service update (container/port mapping).
      # - taskdef.json: Defines ECS task (CPU, memory, container image).
      # - imageDetail.json: Helps CodePipeline/ECR integration.
      # ------------------------------------------------------------------
      - name: Create deployment files
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image-uri }}
          EXECUTION_ROLE_ARN: ${{ steps.get-execution-role.outputs.execution-role-arn }}
        run: |
          # CodeDeploy AppSpec
          cat > appspec.yml << 'EOF'
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: <TASK_DEFINITION>
                  LoadBalancerInfo:
                    ContainerName: "awslab-app-container"
                    ContainerPort: 8080
          EOF

          # ECS Task Definition JSON
          cat > taskdef.json << EOF
          {
            "family": "${{ env.ECS_TASK_DEFINITION }}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "$IMAGE_URI",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8080,
                    "protocol": "tcp"
                  }
                ]
              }
            ]
          }
          EOF

          # CodePipeline/ECR image details
          cat > imageDetail.json << EOF
          {
            "ImageURI": "$IMAGE_URI"
          }
          EOF

          echo "Created deployment files:"
          ls -la *.yml *.json

      # --------------------------------------------------------------------
      # Step 7: Package deployment artifacts and upload to S3
      # - CodePipeline is configured to poll or be triggered by EventBridge.
      # - S3 location is the integration point for pipeline execution.
      # --------------------------------------------------------------------
      - name: Create and upload deployment zip for CodePipeline
        run: |
          zip deployment-files.zip appspec.yml taskdef.json imageDetail.json

          aws s3 cp deployment-files.zip s3://${{ env.S3_BUCKET }}/deployment-files.zip --region ${{ env.AWS_REGION }}

          echo "Uploaded deployment zip for CodePipeline to: s3://${{ env.S3_BUCKET }}/deployment-files.zip"

          aws s3 ls s3://${{ env.S3_BUCKET }}/ --region ${{ env.AWS_REGION }}

      # ---------------------------------------------------------
      # Step 8: Deployment summary
      # - Prints a human-readable summary for CI/CD visibility.
      # ---------------------------------------------------------
      - name: Deployment Summary
        run: |
          echo "ðŸš€ Deployment Summary:"
          echo "- Docker image pushed to ECR with 'latest' tag"
          echo "- Deployment files uploaded to S3"
          echo "- EventBridge should trigger CodePipeline automatically"
          echo "- Monitor pipeline at: https://eu-central-1.console.aws.amazon.com/codesuite/codepipeline/pipelines"
