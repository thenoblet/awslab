# ------------------------------------------------------------------------------
# GitHub Actions Workflow: Build and Push to Amazon ECR
#
# Author: Patrick Noblet Appiah (@thenoblet)
# Date:   09-09-2025
#
# Purpose:
#   - On each push to the main branch, this workflow:
#       1. Builds and tags a Docker image of the application.
#       2. Pushes the image to Amazon Elastic Container Registry (ECR).
#       3. Generates ECS task and deployment artifacts (taskdef.json, appspec.yml).
#       4. Packages and uploads these artifacts to S3 for CodePipeline to consume.
#
# Notes:
#   - Authentication to AWS is handled via OIDC (no long-lived AWS keys).
#   - CodePipeline + EventBridge integration will automatically pick up the S3
#     deployment package and proceed with ECS deployment.
#   - IMAGE_TAG is pinned to the Git commit SHA for immutability, while 'latest'
#     is used for ECS service updates.
#
# Security:
#   - Requires a pre-configured IAM role (`GitHubOidcRoleForEcr-thenoblet-awslab`)
#     which is created in the template (security.yaml) with ECR, ECS, and S3 permissions.
#   - OIDC avoids the need to store static AWS credentials in GitHub Secrets.
#
# ------------------------------------------------------------------------------

name: Build and Push to Amazon ECR

on:
  push:
    branches: ["main"]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "eu-central-1"
      ECR_REPOSITORY: "cicd-ecr-repo"
      S3_BUCKET: "artif-bkt"
      ECS_TASK_DEFINITION: "CICD-ECS-STK-task"
      CONTAINER_NAME: "awslab-app-container"
      ECS_CLUSTER_STACK_NAME: "CICD-ECS-STK"

    steps:
      # ------------------------------
      # Step 1: Checkout repo
      # ------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # ------------------------------
      # Step 2: AWS OIDC Auth
      # ------------------------------
      - name: Configure AWS Credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubOidcRoleForEcr
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: ECSPushFromGitHubActions

      # ------------------------------
      # Step 3: Get Execution Role ARN
      # ------------------------------
      - name: Get ECS Task Execution Role ARN
        id: get-execution-role
        run: |
          EXECUTION_ROLE_ARN=$(aws cloudformation describe-stack-resources \
            --stack-name ${{ env.ECS_CLUSTER_STACK_NAME }} \
            --region ${{ env.AWS_REGION }} \
            --query 'StackResources[?LogicalResourceId==`ECSTaskExecutionRole`].PhysicalResourceId' \
            --output text)
          echo "execution-role-arn=$EXECUTION_ROLE_ARN" >> $GITHUB_OUTPUT

      # ------------------------------
      # Step 4: Log in to Amazon ECR
      # ------------------------------
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ------------------------------
      # Step 5: Build & Push image
      # ------------------------------
      - name: Build, tag, and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image-uri=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT

      # ------------------------------
      # Step 6: Prepare deploy files
      # ------------------------------
      - name: Inject dynamic values into deploy files
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image-uri }}
          EXECUTION_ROLE_ARN: ${{ steps.get-execution-role.outputs.execution-role-arn }}
        run: |
          sed -i "s|<IMAGE_URI>|$IMAGE_URI|g" deploy/taskdef.json
          sed -i "s|<TASK_DEFINITION>|${{ env.ECS_TASK_DEFINITION }}|g" deploy/taskdef.json
          sed -i "s|<EXECUTION_ROLE_ARN>|$EXECUTION_ROLE_ARN|g" deploy/taskdef.json
          sed -i "s|<CONTAINER_NAME>|${{ env.CONTAINER_NAME }}|g" deploy/taskdef.json
          sed -i "s|<AWS_REGION>|${{ env.AWS_REGION }}|g" deploy/taskdef.json

          sed -i "s|<TASK_DEFINITION>|${{ env.ECS_TASK_DEFINITION }}|g" deploy/appspec.yaml
          sed -i "s|<CONTAINER_NAME>|${{ env.CONTAINER_NAME }}|g" deploy/appspec.yaml

          sed -i "s|<IMAGE_URI>|$IMAGE_URI|g" deploy/imageDetail.json

          echo "=> Updated deploy files with placeholders."

      - name: Debug deploy files
        run: |
          echo "=== appspec.yaml ==="
          cat deploy/appspec.yaml
          echo "=== taskdef.json ==="
          cat deploy/taskdef.json

      # ------------------------------
      # Step 7: Zip & Upload deploy files
      # ------------------------------
      - name: Package and upload deployment files
        run: |
          cd deploy
          zip ../deployment-files.zip appspec.yaml taskdef.json imageDetail.json
          cd ..

          aws s3 cp deployment-files.zip s3://${{ env.S3_BUCKET }}/deployment-files.zip --region ${{ env.AWS_REGION }}
          echo "=> Uploaded deployment files to s3://${{ env.S3_BUCKET }}/deployment-files.zip"

      # ------------------------------
      # Step 8: Summary
      # ------------------------------
      - name: Deployment Summary
        run: |
          echo "=== Deployment Summary: ==="
          echo "- Docker image pushed: ${{ steps.build-image.outputs.image-uri }}"
          echo "- Deployment files uploaded to S3"
          echo "- EventBridge/CodePipeline will trigger ECS deployment"
